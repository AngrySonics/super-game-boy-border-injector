export const ASSEMBLED_HOOK_INFO=[
	//common case
	{
		id:'default',
		code:[
			0xf5,						//push	af
			0x3e, 'rom_bank_number',	//ld	a, sgb_init_bank
			0xea, 0x00, 0x20,			//ld	[0x2000], a
			0xcd, 0x00, 0x40,			//call	0x4000
			0xea, 0x00, 0x20,			//ld	[0x2000], a
			0xf1,						//pop	af
			0xc3, 'entry_point_low', 'entry_point_high' //jp original_entry_point
		]
	},
	//optimized version, reduce from 16 bytes to 14 by setting hl=0x2000 before leaving sgb_init
	{
		id:'optimized_hl',
		code:[
			0xf5,						//push	af
			0x3e, 'rom_bank_number',	//ld	a, sgb_init_bank
			0xea, 0x00, 0x20,			//ld	[0x2000], a
			0xcd, 0x00, 0x40,			//call	0x4000
			0x77,						//ld	[hl], a <-- OPTIMIZATION HERE!
			0xf1,						//pop	af
			0xc3, 'entry_point_low', 'entry_point_high' //jp original_entry_point
		],
		patchSgbInit:[
			//this code will be added before sgb_init's ret
			0x2e, 0x00,					//ld l, $00
			0x26, 0x20,					//ld h, $20
			0xc9						//ret
		]
	},
	//MBC1 + larger than 512kb
	//requires additional code to write to $4000 (ROM bank upper bits)
	{
		id:'mbc1_extra',
		code:[
			0xf5,								//push	af
			0x3e, 'rom_bank_number',			//ld	a, sgb_init_bank_lowerbits
			0xea, 0x00, 0x20,					//ld	[0x2000], a
			0x3e, 'rom_bank_number_upperbits',	//ld	a, sgb_init_bank_upperbits
			0xea, 0x00, 0x40,					//ld	[0x4000], a
			0xcd, 0x00, 0x40,					//call	0x4000
			0xea, 0x00, 0x20,					//ld	[0x2000], a
			0xaf,								//xor	a
			0xea, 0x00, 0x40,					//ld	[0x4000], a
			0xf1,								//pop	af
			0xc3, 'entry_point_low', 'entry_point_high' //jp original_entry_point
		]
	},
	//MBC2
	//rom bank must be written to 0x2100
	{
		id:'mbc2',
		code:[
			0xf5,						//push	af
			0x3e, 'rom_bank_number',	//ld	a, sgb_init_bank
			0xea, 0x00, 0x21,			//ld	[0x2100], a
			0xcd, 0x00, 0x40,			//call	0x4000
			0xea, 0x00, 0x21,			//ld	[0x2100], a
			0xf1,						//pop	af
			0xc3, 'entry_point_low', 'entry_point_high' //jp original_entry_point
		]
	}
];
ASSEMBLED_HOOK_INFO.forEach(function(assembledInfo){
	assembledInfo.patchOffsets={
		romBankNumber: assembledInfo.code.indexOf('rom_bank_number'),
		romBankNumberUpperbits: assembledInfo.code.indexOf('rom_bank_number_upperbits'),
		entryPoint: assembledInfo.code.indexOf('entry_point_low')
	}
});

export const getAssembledHookInfo=function(id){
	for(var i=0; i<ASSEMBLED_HOOK_INFO.length; i++){
		if(ASSEMBLED_HOOK_INFO[i].id===id)
			return ASSEMBLED_HOOK_INFO[i];
	}
	throw new Error('invalid assemble hook');
}

// assembled code from "SGB Bank - Code" SECTION in main.asm
export const ASSEMBLED_SGB_CODE=[
//sgb_init
0xc5, 0xd5, 0xe5, 0xcd, 0xa0, 0x40, 0xcd, 0xb3, 0x40, 0xca, 0x81, 0x40, 0x21, 0x2b, 0x42, 0xcd,
0x1e, 0x41, 0x21, 0x8b, 0x41, 0xcd, 0x1e, 0x41, 0x21, 0x9b, 0x41, 0xcd, 0x1e, 0x41, 0x21, 0xab,
0x41, 0xcd, 0x1e, 0x41, 0x21, 0xbb, 0x41, 0xcd, 0x1e, 0x41, 0x21, 0xcb, 0x41, 0xcd, 0x1e, 0x41,
0x21, 0xdb, 0x41, 0xcd, 0x1e, 0x41, 0x21, 0xeb, 0x41, 0xcd, 0x1e, 0x41, 0x21, 0xfb, 0x41, 0xcd,
0x1e, 0x41, 0x11, 0x4b, 0x42, 0x21, 0x00, 0x5c, 0xcd, 0xec, 0x40, 0x11, 0x5b, 0x42, 0x21, 0x00,
0x6c, 0xcd, 0xec, 0x40, 0x11, 0x6b, 0x42, 0x21, 0x00, 0x53, 0xcd, 0xec, 0x40, 0x21, 0x00, 0x7c,
0x11, 0x7b, 0x42, 0xcd, 0xec, 0x40, 0x21, 0x8b, 0x42, 0xcd, 0x1e, 0x41, 0xcd, 0x63, 0x41, 0x01,
0xb4, 0x11, 0x21, 0x00, 0x88, 0xcd, 0x83, 0x41, 0xcd, 0x75, 0x41, 0x21, 0x3b, 0x42, 0xcd, 0x1e,
0x41, 0xcd, 0x75, 0x41, 0xe1, 0xd1, 0xc1, 0x3e, 0x01, 0xc9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //fill some nops for additional patching

//other sgb subroutines and packet data
0xcd, 0x63, 0x41, 0x21, 0x04, 0xff, 0x06, 0x2e, 0xaf, 0xbe, 0x20, 0xfd, 0xbe, 0x28, 0xfd, 0x05,
0x20, 0xf7, 0xc9, 0x21, 0x0b, 0x42, 0xcd, 0x1e, 0x41, 0xf0, 0x00, 0xe6, 0x03, 0xfe, 0x03, 0x20,
0x21, 0x3e, 0x20, 0xe0, 0x00, 0xf5, 0xf1, 0x3e, 0x30, 0xe0, 0x00, 0x3e, 0x10, 0xe0, 0x00, 0xf5,
0xf1, 0xf5, 0xf1, 0x3e, 0x30, 0xe0, 0x00, 0xf5, 0xf1, 0xf5, 0xf1, 0xf0, 0x00, 0xe6, 0x03, 0xd6,
0x03, 0xc8, 0x21, 0x1b, 0x42, 0xcd, 0x1e, 0x41, 0x3e, 0x01, 0xa7, 0xc9, 0x01, 0x00, 0x10, 0xf3,
0xd5, 0xcd, 0x63, 0x41, 0x3e, 0xe4, 0xe0, 0x47, 0x11, 0x00, 0x88, 0xcd, 0x7a, 0x41, 0x21, 0x00,
0x98, 0x11, 0x0c, 0x00, 0x3e, 0x80, 0x0e, 0x0d, 0x06, 0x14, 0x22, 0x3c, 0x05, 0x20, 0xfb, 0x19,
0x0d, 0x20, 0xf5, 0xcd, 0x75, 0x41, 0xe1, 0xcd, 0x1e, 0x41, 0xaf, 0xe0, 0x47, 0xc9, 0x7e, 0xe6,
0x07, 0xc8, 0x47, 0xc5, 0xaf, 0xe0, 0x00, 0x3e, 0x30, 0xe0, 0x00, 0x06, 0x10, 0x1e, 0x08, 0x2a,
0x57, 0xcb, 0x42, 0x3e, 0x10, 0x20, 0x02, 0x3e, 0x20, 0xe0, 0x00, 0x3e, 0x30, 0xe0, 0x00, 0xcb,
0x1a, 0x1d, 0x20, 0xed, 0x05, 0x20, 0xe6, 0x3e, 0x20, 0xe0, 0x00, 0x3e, 0x30, 0xe0, 0x00, 0xcd,
0x57, 0x41, 0xc1, 0x05, 0xc8, 0x18, 0xcc, 0x11, 0x58, 0x1b, 0x00, 0x00, 0x00, 0x1b, 0x7a, 0xb3,
0x20, 0xf8, 0xc9, 0xf0, 0x40, 0x07, 0xd0, 0xf3, 0xf0, 0x44, 0xfe, 0x91, 0x20, 0xfa, 0xf0, 0x40,
0xcb, 0xbf, 0xe0, 0x40, 0xc9, 0x3e, 0xc5, 0xe0, 0x40, 0xc9, 0x2a, 0x12, 0x13, 0x0b, 0x79, 0xb0,
0x20, 0xf8, 0xc9, 0xaf, 0x22, 0x0b, 0x79, 0xb0, 0x20, 0xf9, 0xc9, 0x79, 0x5d, 0x08, 0x00, 0x0b,
0x8c, 0xd0, 0xf4, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x79, 0x52, 0x08, 0x00, 0x0b,
0xa9, 0xe7, 0x9f, 0x01, 0xc0, 0x7e, 0xe8, 0xe8, 0xe8, 0xe8, 0xe0, 0x79, 0x47, 0x08, 0x00, 0x0b,
0xc4, 0xd0, 0x16, 0xa5, 0xcb, 0xc9, 0x05, 0xd0, 0x10, 0xa2, 0x28, 0x79, 0x3c, 0x08, 0x00, 0x0b,
0xf0, 0x12, 0xa5, 0xc9, 0xc9, 0xc8, 0xd0, 0x1c, 0xa5, 0xca, 0xc9, 0x79, 0x31, 0x08, 0x00, 0x0b,
0x0c, 0xa5, 0xca, 0xc9, 0x7e, 0xd0, 0x06, 0xa5, 0xcb, 0xc9, 0x7e, 0x79, 0x26, 0x08, 0x00, 0x0b,
0x39, 0xcd, 0x48, 0x0c, 0xd0, 0x34, 0xa5, 0xc9, 0xc9, 0x80, 0xd0, 0x79, 0x1b, 0x08, 0x00, 0x0b,
0xea, 0xea, 0xea, 0xea, 0xea, 0xa9, 0x01, 0xcd, 0x4f, 0x0c, 0xd0, 0x79, 0x10, 0x08, 0x00, 0x0b,
0x4c, 0x20, 0x08, 0xea, 0xea, 0xea, 0xea, 0xea, 0x60, 0xea, 0xea, 0x89, 0x01, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb9, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x99, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa1, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x00, 0x01, 0x00,
0x02, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
];
export const SGB_INIT_RET_OFFSET=ASSEMBLED_SGB_CODE.indexOf(0xc9); //ret
export const SGB_INIT_CUSTOM_PALETTE_CODE_OFFSET=ASSEMBLED_SGB_CODE.indexOf(0x53) + 1 + 3; //ld hl, _data_sgb_border_map
